;;-*- mode:lisp -*-

((translation-unit
  (external-declaration
   (:declarator (function (parameter ((:type-specifier int))
                                     (|argument|)) \f)
                (:function-declarator
                 nil
                 (progn (declaration (:declarator |vector| (array nil (unary 3)
                                                                  ((:type-specifier int)))
                                                  (compound-literal nil ((unary 1)
                                                                         (unary 2)
                                                                         (unary 3)))))
                        (declaration (:declarator |point| ((:type-specifier (struct |point| ((struct-declaration ((:type-specifier int))
                                                                                                                 (struct-declarator \x))
                                                                                             (struct-declaration ((:type-specifier int))
                                                                                                                 (struct-declarator \y))
                                                                                             (struct-declaration ((:type-specifier char))
                                                                                                                 (struct-declarator (pointer nil |color_name|)))
                                                                                             (struct-declaration ((:type-specifier int))
                                                                                                                 (struct-declarator (array nil (unary 3) |color_rgb|)))
                                                                                             (struct-declaration ((:type-specifier (struct |point| nil)))
                                                                                                                 (struct-declarator (pointer nil |next|)))
                                                                                             (struct-declaration ((:type-specifier int))
                                                                                                                 (struct-declarator (function (parameter ((:type-specifier int)))
                                                                                                                                              (pointer nil |method|)))))))) nil))
                        (declaration (:declarator |ivar| ((:type-specifier int)) nil))
                        (declaration (:declarator |pvar| (pointer nil ((:type-specifier int))) nil))
                        (declaration (:declarator |svar| (pointer nil ((:type-specifier char))) nil))
                        (declaration (:declarator |sliteral| (array nil (if $1 '* nil)
                                                                    ((:type-specifier char)))
                                                  (unary "\"literal\"")))
                        (declaration (:declarator \a ((:type-specifier int))
                                                  (unary 1)))
                        (declaration (:declarator \b ((:type-specifier int))
                                                  (unary 2)))
                        (declaration (:declarator \c ((:type-specifier int))
                                                  (unary 3)))
                        (declaration (:declarator \x ((:type-specifier int))
                                                  (unary 42)))
                        (declaration (:declarator |primary_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (unary |argument|))
                        (setf |ivar| (unary 42))
                        (setf |svar| (unary "\"hello\""))
                        (setf |ivar| (+ (unary 1)
                                        (unary 2)))
                        (setf |svar| (unary "\"Hello World\""))
                        (declaration (:declarator |unary_expressions| ((:type-specifier int)) nil))
                        (setf |svar| (unary (& (aref (unary |sliteral|)
                                                     (unary 0)))))
                        (setf |pvar| (unary (& (unary |ivar|))))
                        (setf |ivar| (unary (* (unary |pvar|))))
                        (setf |ivar| (unary (+ (unary |argument|))))
                        (setf |ivar| (unary (+ (unary |argument|))))
                        (setf |ivar| (unary (+ (unary (+ (unary |argument|))))))
                        (setf |ivar| (unary (- (unary |argument|))))
                        (setf |ivar| (unary (- (unary |argument|))))
                        (setf |ivar| (unary (- (unary (- (unary |argument|))))))
                        (setf |ivar| (unary (~ (unary |argument|))))
                        (setf |ivar| (unary (~ (unary |argument|))))
                        (setf |ivar| (unary (! (unary |argument|))))
                        (setf |ivar| (unary (! (unary |argument|))))
                        (setf |ivar| (unary (size-of |argument|)))
                        (setf |ivar| (unary (size-of (unary |argument|))))
                        (setf |ivar| (unary (size-of (compound-literal (((:type-specifier int)) nil) nil))))
                        (setf |ivar| (unary (align-of (((:type-specifier int)) nil))))
                        (setf |ivar| (unary (pre-increment (unary |argument|))))
                        (setf |ivar| (unary (pre-decrement (unary |argument|))))
                        (declaration (:declarator |postfix_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (dot (unary |point|) \x))
                        (setf |ivar| (aref (dot (unary |point|) |color_rgb|)
                                           (unary 0)))
                        (setf |ivar| (ptr-op (dot (unary |point|) |next|) \x))
                        (setf |ivar| (aref (ptr-op (dot (unary |point|) |next|) |color_name|)
                                           (unary 0)))
                        (setf |ivar| (call (dot (unary |point|) |method|)
                                           ((unary 42))))
                        (setf |ivar| (post-increment (unary |argument|)))
                        (setf |ivar| (post-decrement (unary |argument|)))
                        (setf |ivar| (post-increment (ptr-op (dot (unary |point|) |next|) \x)))
                        (setf |ivar| (post-decrement (ptr-op (dot (unary |point|) |next|) \y)))
                        (declaration (:declarator |cast_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (cast (((:type-specifier int)) nil)
                                           (aref (unary |sliteral|)
                                                 (unary 0))))
                        (setf |ivar| (cast (((:type-specifier int)) nil)
                                           (unary \a)))
                        (setf |ivar| (cast (((:type-specifier int)) nil)
                                           (unary \a)))
                        (setf |ivar| (cast (((:type-specifier int)) nil)
                                           (call (unary \f)
                                                 ((unary 0)))))
                        (declaration (:declarator |multiplicative_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (* (unary \a)
                                        (unary \x)))
                        (setf |ivar| (* (unary 2)
                                        (unary 3)))
                        (setf |ivar| (* (unary 3)
                                        (unary \x)))
                        (setf |ivar| (* (unary \x)
                                        (unary 2)))
                        (setf |ivar| (/ (unary \a)
                                        (unary \x)))
                        (setf |ivar| (/ (unary 2)
                                        (unary 3)))
                        (setf |ivar| (/ (unary 3)
                                        (unary \x)))
                        (setf |ivar| (/ (unary \x)
                                        (unary 2)))
                        (setf |ivar| (% (unary \a)
                                        (unary \x)))
                        (setf |ivar| (% (unary 2)
                                        (unary 3)))
                        (setf |ivar| (% (unary 3)
                                        (unary \x)))
                        (setf |ivar| (% (unary \x)
                                        (unary 2)))
                        (declaration (:declarator |additive_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (+ (unary \a)
                                        (unary \x)))
                        (setf |ivar| (+ (unary 2)
                                        (unary 3)))
                        (setf |ivar| (+ (unary 3)
                                        (unary \x)))
                        (setf |ivar| (+ (unary \x)
                                        (unary 2)))
                        (setf |ivar| (- (unary \a)
                                        (unary \x)))
                        (setf |ivar| (- (unary 2)
                                        (unary 3)))
                        (setf |ivar| (- (unary 3)
                                        (unary \x)))
                        (setf |ivar| (- (unary \x)
                                        (unary 2)))
                        (declaration (:declarator |shift_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (<< (unary \a)
                                         (unary \x)))
                        (setf |ivar| (<< (unary 2)
                                         (unary 3)))
                        (setf |ivar| (<< (unary 3)
                                         (unary \x)))
                        (setf |ivar| (<< (unary \x)
                                         (unary 2)))
                        (setf |ivar| (>> (unary \a)
                                         (unary \x)))
                        (setf |ivar| (>> (unary 2)
                                         (unary 3)))
                        (setf |ivar| (>> (unary 3)
                                         (unary \x)))
                        (setf |ivar| (>> (unary \x)
                                         (unary 2)))
                        (declaration (:declarator |relational_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (> (unary \a)
                                        (unary \x)))
                        (setf |ivar| (> (unary 2)
                                        (unary 3)))
                        (setf |ivar| (> (unary 3)
                                        (unary \x)))
                        (setf |ivar| (> (unary \x)
                                        (unary 2)))
                        (setf |ivar| (< (unary \a)
                                        (unary \x)))
                        (setf |ivar| (< (unary 2)
                                        (unary 3)))
                        (setf |ivar| (< (unary 3)
                                        (unary \x)))
                        (setf |ivar| (< (unary \x)
                                        (unary 2)))
                        (setf |ivar| (>= (unary \a)
                                         (unary \x)))
                        (setf |ivar| (>= (unary 2)
                                         (unary 3)))
                        (setf |ivar| (>= (unary 3)
                                         (unary \x)))
                        (setf |ivar| (>= (unary \x)
                                         (unary 2)))
                        (setf |ivar| (<= (unary \a)
                                         (unary \x)))
                        (setf |ivar| (<= (unary 2)
                                         (unary 3)))
                        (setf |ivar| (<= (unary 3)
                                         (unary \x)))
                        (setf |ivar| (<= (unary \x)
                                         (unary 2)))
                        (declaration (:declarator |equality_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (== (unary \a)
                                         (unary \x)))
                        (setf |ivar| (== (unary 2)
                                         (unary 3)))
                        (setf |ivar| (== (unary 3)
                                         (unary \x)))
                        (setf |ivar| (== (unary \x)
                                         (unary 2)))
                        (setf |ivar| (!= (unary \a)
                                         (unary \x)))
                        (setf |ivar| (!= (unary 2)
                                         (unary 3)))
                        (setf |ivar| (!= (unary 3)
                                         (unary \x)))
                        (setf |ivar| (!= (unary \x)
                                         (unary 2)))
                        (declaration (:declarator |logic_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (& (unary \a)
                                        (unary \b)))
                        (setf |ivar| (^ (unary \a)
                                        (unary \b)))
                        (setf |ivar| (\| (unary \a)
                                         (unary \b)))
                        (setf |ivar| (&& (unary \a)
                                         (unary \b)))
                        (setf |ivar| (|\|\|| (unary \a)
                                             (unary \b)))
                        (setf |ivar| (if (unary \a)
                                         ((unary \b)
                                          (unary \c))))
                        (declaration (:declarator |assignment_expressions| ((:type-specifier int)) nil))
                        (setf |ivar| (unary |argument|))
                        (+= |ivar| (unary |argument|))
                        (-= |ivar| (unary |argument|))
                        (*= |ivar| (unary |argument|))
                        (/= |ivar| (unary |argument|))
                        (%= |ivar| (unary |argument|))
                        (<<= |ivar| (unary |argument|))
                        (>>= |ivar| (unary |argument|))
                        (&= |ivar| (unary |argument|))
                        (^= |ivar| (unary |argument|))
                        (\|= |ivar| (unary |argument|))
                        (declaration (:declarator |sequence_expressions| ((:type-specifier int)) nil))
                        (progn (setf |ivar| (unary \a))
                               (unary \b)
                               (unary \c))
                        (progn (setf |ivar| (progn (post-increment (unary \a))
                                                   (call (unary \f)
                                                         ((unary \b)))
                                                   (+ (+ (* (* (unary \a)
                                                               (unary \x))
                                                            (unary \x))
                                                         (* (unary \b)
                                                            (unary \x)))
                                                      (unary \c))))
                               (+ (* (+ (* (unary \a)
                                           (unary \x))
                                        (unary \b))
                                     (unary \x))
                                  (unary \c)))
                        (declaration (:declarator \z ((:type-specifier int))
                                                  (+ (unary 1)
                                                     (/ (* (unary 2)
                                                           (unary 3))
                                                        (unary 4)))))
                        (return (unary \z))))))
  (external-declaration (:declarator (function nil |main|)
                                     (:function-declarator nil (progn (return (unary 0))))))))

                                     
