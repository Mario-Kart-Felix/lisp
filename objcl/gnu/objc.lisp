(eval-when (:compile-toplevel :load-toplevel :execute)
  (setf *readtable* (copy-readtable nil)))
(in-package "COM.INFORMATIMAGO.OBJC.GNU")
;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.7
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("objc_msg_lookup" objc_msg_lookup) :pointer
  (receiver :pointer)
  (op :pointer))

(cffi:defcstruct objc_super
	(self :pointer)
	(super_class :pointer))

(cffi:defcfun ("objc_msg_lookup_super" objc_msg_lookup_super) :pointer
  (super :pointer)
  (sel :pointer))

(cffi:defcvar ("__objc_msg_forward" __objc_msg_forward)
 :pointer)

(cffi:defcvar ("__objc_msg_forward2" __objc_msg_forward2)
 :pointer)

(cffi:defcfun ("objc_exception_throw" objc_exception_throw) :void
  (exception :pointer))

(cffi:defctype objc_exception_matcher :pointer)

(cffi:defcfun ("objc_setExceptionMatcher" objc_setExceptionMatcher) :pointer
  (new_matcher :pointer))

(cffi:defctype objc_uncaught_exception_handler :pointer)

(cffi:defcfun ("objc_setUncaughtExceptionHandler" objc_setUncaughtExceptionHandler) :pointer
  (new_handler :pointer))

(cffi:defcfun ("objc_sync_enter" objc_sync_enter) :int
  (object :pointer))

(cffi:defcfun ("objc_sync_exit" objc_sync_exit) :int
  (object :pointer))

(defanonenum 
	(OBJC_SYNC_SUCCESS #.0)
	(OBJC_SYNC_NOT_OWNING_THREAD_ERROR #.-1)
	(OBJC_SYNC_TIMED_OUT #.-2)
	(OBJC_SYNC_NOT_INITIALIZED #.-3))

(cl:defconstant __GNU_LIBOBJC__ 20110608)

(cffi:defctype BOOL :unsigned-char)

(cffi:defctype SEL :pointer)

(cffi:defctype Class :pointer)

(cffi:defcstruct objc_object
	(class_pointer :pointer))

(cffi:defctype id :pointer)

(cffi:defctype IMP :pointer)

(cffi:defctype Protocol (:struct objc_object))

(cffi:defctype Ivar :pointer)

(cffi:defctype Property :pointer)

(cffi:defctype objc_property_t :pointer)

(cffi:defctype Method :pointer)

(cffi:defctype Category :pointer)

(cffi:defcstruct objc_method_description
	(name :pointer)
	(types :string))








































(cl:defconstant _F_CONST #x01)

(cl:defconstant _F_IN #x01)

(cl:defconstant _F_OUT #x02)

(cl:defconstant _F_INOUT #x03)

(cl:defconstant _F_BYCOPY #x04)

(cl:defconstant _F_BYREF #x08)

(cl:defconstant _F_ONEWAY #x10)

(cl:defconstant _F_GCINVISIBLE #x20)

(cffi:defcfun ("object_getClass" object_getClass) :pointer
  (object :pointer))

(cffi:defcfun ("sel_getName" sel_getName) :string
  (selector :pointer))

(cffi:defcfun ("sel_getTypeEncoding" sel_getTypeEncoding) :string
  (selector :pointer))

(cffi:defcfun ("sel_getUid" sel_getUid) :pointer
  (name :string))

(cffi:defcfun ("sel_registerName" sel_registerName) :pointer
  (name :string))

(cffi:defcfun ("sel_registerTypedName" sel_registerTypedName) :pointer
  (name :string)
  (type :string))

(cffi:defcfun ("sel_isEqual" sel_isEqual) :unsigned-char
  (first_selector :pointer)
  (second_selector :pointer))

(cffi:defcfun ("sel_copyTypedSelectorList" sel_copyTypedSelectorList) :pointer
  (name :string)
  (numberOfReturnedSelectors :pointer))

(cffi:defcfun ("sel_getTypedSelector" sel_getTypedSelector) :pointer
  (name :string))

(cffi:defcfun ("class_createInstance" class_createInstance) :pointer
  (class_ :pointer)
  (extraBytes :pointer))

(cffi:defcfun ("object_copy" object_copy) :pointer
  (object :pointer)
  (extraBytes :pointer))

(cffi:defcfun ("object_dispose" object_dispose) :pointer
  (object :pointer))

(cffi:defcfun ("object_getClassName" object_getClassName) :string
  (object :pointer))

(cffi:defcfun ("object_setClass" object_setClass) :pointer
  (object :pointer)
  (class_ :pointer))

(cffi:defcfun ("class_getInstanceVariable" class_getInstanceVariable) :pointer
  (class_ :pointer)
  (name :string))

(cffi:defcfun ("class_getClassVariable" class_getClassVariable) :pointer
  (class_ :pointer)
  (name :string))

(cffi:defcfun ("object_getIndexedIvars" object_getIndexedIvars) :pointer
  (object :pointer))

(cffi:defcfun ("object_getInstanceVariable" object_getInstanceVariable) :pointer
  (object :pointer)
  (name :string)
  (returnValue :pointer))

(cffi:defcfun ("object_setInstanceVariable" object_setInstanceVariable) :pointer
  (object :pointer)
  (name :string)
  (newValue :pointer))

(cffi:defcfun ("object_getIvar" object_getIvar) :pointer
  (object :pointer)
  (variable :pointer))

(cffi:defcfun ("object_setIvar" object_setIvar) :void
  (object :pointer)
  (variable :pointer)
  (value :pointer))

(cffi:defcfun ("ivar_getName" ivar_getName) :string
  (variable :pointer))

(cffi:defcfun ("ivar_getOffset" ivar_getOffset) :pointer
  (variable :pointer))

(cffi:defcfun ("ivar_getTypeEncoding" ivar_getTypeEncoding) :string
  (variable :pointer))

(cffi:defcfun ("class_copyIvarList" class_copyIvarList) :pointer
  (class_ :pointer)
  (numberOfReturnedIvars :pointer))

(cffi:defcfun ("class_addIvar" class_addIvar) :unsigned-char
  (class_ :pointer)
  (ivar_name :string)
  (size :pointer)
  (log_2_of_alignment :unsigned-char)
  (type :string))

(cffi:defcfun ("property_getName" property_getName) :string
  (property :pointer))

(cffi:defcfun ("property_getAttributes" property_getAttributes) :string
  (property :pointer))

(cffi:defcfun ("class_getProperty" class_getProperty) :pointer
  (class_ :pointer)
  (propertyName :string))

(cffi:defcfun ("class_copyPropertyList" class_copyPropertyList) :pointer
  (class_ :pointer)
  (numberOfReturnedProperties :pointer))

(cffi:defcfun ("class_getIvarLayout" class_getIvarLayout) :string
  (class_ :pointer))

(cffi:defcfun ("class_getWeakIvarLayout" class_getWeakIvarLayout) :string
  (class_ :pointer))

(cffi:defcfun ("class_setIvarLayout" class_setIvarLayout) :void
  (class_ :pointer)
  (layout :string))

(cffi:defcfun ("class_setWeakIvarLayout" class_setWeakIvarLayout) :void
  (class_ :pointer)
  (layout :string))

(cffi:defctype objc_get_unknown_class_handler :pointer)

(cffi:defcfun ("objc_setGetUnknownClassHandler" objc_setGetUnknownClassHandler) :pointer
  (new_handler :pointer))

(cffi:defcfun ("objc_getClass" objc_getClass) :pointer
  (name :string))

(cffi:defcfun ("objc_lookUpClass" objc_lookUpClass) :pointer
  (name :string))

(cffi:defcfun ("objc_getMetaClass" objc_getMetaClass) :pointer
  (name :string))

(cffi:defcfun ("objc_getRequiredClass" objc_getRequiredClass) :pointer
  (name :string))

(cffi:defcfun ("objc_getClassList" objc_getClassList) :int
  (returnValue :pointer)
  (maxNumberOfClassesToReturn :int))

(cffi:defcfun ("class_getName" class_getName) :string
  (class_ :pointer))

(cffi:defcfun ("class_isMetaClass" class_isMetaClass) :unsigned-char
  (class_ :pointer))

(cffi:defcfun ("class_getSuperclass" class_getSuperclass) :pointer
  (class_ :pointer))

(cffi:defcfun ("class_getVersion" class_getVersion) :int
  (class_ :pointer))

(cffi:defcfun ("class_setVersion" class_setVersion) :void
  (class_ :pointer)
  (version :int))

(cffi:defcfun ("class_getInstanceSize" class_getInstanceSize) :pointer
  (class_ :pointer))

(cffi:defcfun ("method_setImplementation" method_setImplementation) :pointer
  (method :pointer)
  (implementation :pointer))

(cffi:defcfun ("method_exchangeImplementations" method_exchangeImplementations) :void
  (method_a :pointer)
  (method_b :pointer))

(cffi:defcfun ("objc_allocateClassPair" objc_allocateClassPair) :pointer
  (super_class :pointer)
  (class_name :string)
  (extraBytes :int))

(cffi:defcfun ("objc_registerClassPair" objc_registerClassPair) :void
  (class_ :pointer))

(cffi:defcfun ("objc_disposeClassPair" objc_disposeClassPair) :void
  (class_ :pointer))

(cffi:defcfun ("class_getInstanceMethod" class_getInstanceMethod) :pointer
  (class_ :pointer)
  (selector :pointer))

(cffi:defcfun ("class_getClassMethod" class_getClassMethod) :pointer
  (class_ :pointer)
  (selector :pointer))

(cffi:defcfun ("class_getMethodImplementation" class_getMethodImplementation) :pointer
  (class_ :pointer)
  (selector :pointer))

(cffi:defcfun ("class_respondsToSelector" class_respondsToSelector) :unsigned-char
  (class_ :pointer)
  (selector :pointer))

(cffi:defcfun ("class_addMethod" class_addMethod) :unsigned-char
  (class_ :pointer)
  (selector :pointer)
  (implementation :pointer)
  (method_types :string))

(cffi:defcfun ("class_replaceMethod" class_replaceMethod) :pointer
  (class_ :pointer)
  (selector :pointer)
  (implementation :pointer)
  (method_types :string))

(cffi:defcfun ("method_getName" method_getName) :pointer
  (method :pointer))

(cffi:defcfun ("method_getImplementation" method_getImplementation) :pointer
  (method :pointer))

(cffi:defcfun ("method_getTypeEncoding" method_getTypeEncoding) :string
  (method :pointer))

(cffi:defcfun ("method_getDescription" method_getDescription) :pointer
  (method :pointer))

(cffi:defcfun ("class_copyMethodList" class_copyMethodList) :pointer
  (class_ :pointer)
  (numberOfReturnedMethods :pointer))

(cffi:defcfun ("method_getNumberOfArguments" method_getNumberOfArguments) :unsigned-int
  (method :pointer))

(cffi:defcfun ("method_copyReturnType" method_copyReturnType) :string
  (method :pointer))

(cffi:defcfun ("method_copyArgumentType" method_copyArgumentType) :string
  (method :pointer)
  (argumentNumber :unsigned-int))

(cffi:defcfun ("method_getReturnType" method_getReturnType) :void
  (method :pointer)
  (returnValue :string)
  (returnValueSize :pointer))

(cffi:defcfun ("method_getArgumentType" method_getArgumentType) :void
  (method :pointer)
  (argumentNumber :unsigned-int)
  (returnValue :string)
  (returnValueSize :pointer))

(cffi:defcfun ("objc_getProtocol" objc_getProtocol) :pointer
  (name :string))

(cffi:defcfun ("objc_copyProtocolList" objc_copyProtocolList) :pointer
  (numberOfReturnedProtocols :pointer))

(cffi:defcfun ("class_addProtocol" class_addProtocol) :unsigned-char
  (class_ :pointer)
  (protocol :pointer))

(cffi:defcfun ("class_conformsToProtocol" class_conformsToProtocol) :unsigned-char
  (class_ :pointer)
  (protocol :pointer))

(cffi:defcfun ("class_copyProtocolList" class_copyProtocolList) :pointer
  (class_ :pointer)
  (numberOfReturnedProtocols :pointer))

(cffi:defcfun ("protocol_conformsToProtocol" protocol_conformsToProtocol) :unsigned-char
  (protocol :pointer)
  (anotherProtocol :pointer))

(cffi:defcfun ("protocol_isEqual" protocol_isEqual) :unsigned-char
  (protocol :pointer)
  (anotherProtocol :pointer))

(cffi:defcfun ("protocol_getName" protocol_getName) :string
  (protocol :pointer))

(cffi:defcfun ("protocol_getMethodDescription" protocol_getMethodDescription)
              (:pointer (:struct objc_method_description))
  (protocol :pointer)
  (selector :pointer)
  (requiredMethod :unsigned-char)
  (instanceMethod :unsigned-char))

(cffi:defcfun ("protocol_copyMethodDescriptionList" protocol_copyMethodDescriptionList) :pointer
  (protocol :pointer)
  (requiredMethod :unsigned-char)
  (instanceMethod :unsigned-char)
  (numberOfReturnedMethods :pointer))

(cffi:defcfun ("protocol_getProperty" protocol_getProperty) :pointer
  (protocol :pointer)
  (propertyName :string)
  (requiredProperty :unsigned-char)
  (instanceProperty :unsigned-char))

(cffi:defcfun ("protocol_copyPropertyList" protocol_copyPropertyList) :pointer
  (protocol :pointer)
  (numberOfReturnedProperties :pointer))

(cffi:defcfun ("protocol_copyProtocolList" protocol_copyProtocolList) :pointer
  (protocol :pointer)
  (numberOfReturnedProtocols :pointer))

(cffi:defcvar ("_objc_load_callback" _objc_load_callback)
 :pointer)

(cffi:defcfun ("objc_enumerationMutation" objc_enumerationMutation) :void
  (collection :pointer))

(cffi:defcfun ("objc_setEnumerationMutationHandler" objc_setEnumerationMutationHandler) :void
  (handler :pointer))

(cffi:defcfun ("objc_malloc" objc_malloc) :pointer
  (size :pointer))

(cffi:defcfun ("objc_atomic_malloc" objc_atomic_malloc) :pointer
  (size :pointer))

(cffi:defcfun ("objc_realloc" objc_realloc) :pointer
  (mem :pointer)
  (size :pointer))

(cffi:defcfun ("objc_calloc" objc_calloc) :pointer
  (nelem :pointer)
  (size :pointer))

(cffi:defcfun ("objc_free" objc_free) :void
  (mem :pointer))

(cffi:defcfun ("class_ivar_set_gcinvisible" class_ivar_set_gcinvisible) :void
  (_class :pointer)
  (ivarname :string)
  (gcInvisible :unsigned-char))

(cffi:defcfun ("objc_sizeof_type" objc_sizeof_type) :int
  (type :string))

(cffi:defcfun ("objc_alignof_type" objc_alignof_type) :int
  (type :string))

(cffi:defcfun ("objc_aligned_size" objc_aligned_size) :int
  (type :string))

(cffi:defcfun ("objc_promoted_size" objc_promoted_size) :int
  (type :string))

(cffi:defcfun ("objc_skip_type_qualifiers" objc_skip_type_qualifiers) :string
  (type :string))

(cffi:defcfun ("objc_skip_typespec" objc_skip_typespec) :string
  (type :string))

(cffi:defcfun ("objc_skip_offset" objc_skip_offset) :string
  (type :string))

(cffi:defcfun ("objc_skip_argspec" objc_skip_argspec) :string
  (type :string))

(cffi:defcfun ("objc_get_type_qualifiers" objc_get_type_qualifiers) :unsigned-int
  (type :string))

(cffi:defcstruct objc_struct_layout
	(original_type :string)
	(type :string)
	(prev_type :string)
	(record_size :unsigned-int)
	(record_align :unsigned-int))

(cffi:defcfun ("objc_layout_structure" objc_layout_structure) :void
  (type :string)
  (layout :pointer))

(cffi:defcfun ("objc_layout_structure_next_member" objc_layout_structure_next_member) :unsigned-char
  (layout :pointer))

(cffi:defcfun ("objc_layout_finish_structure" objc_layout_finish_structure) :void
  (layout :pointer)
  (size :pointer)
  (align :pointer))

(cffi:defcfun ("objc_layout_structure_get_info" objc_layout_structure_get_info) :void
  (layout :pointer)
  (offset :pointer)
  (align :pointer)
  (type :pointer))

(cffi:defcvar ("__objc_thread_exit_status" __objc_thread_exit_status)
 :int)

(cl:defconstant OBJC_THREAD_INTERACTIVE_PRIORITY 2)

(cl:defconstant OBJC_THREAD_BACKGROUND_PRIORITY 1)

(cl:defconstant OBJC_THREAD_LOW_PRIORITY 0)

(cffi:defctype objc_thread_t :pointer)

(cffi:defcstruct objc_mutex
	(owner :pointer)
	(depth :int)
	(backend :pointer))

(cffi:defctype objc_mutex_t :pointer)

(cffi:defcstruct objc_condition
	(backend :pointer))

(cffi:defctype objc_condition_t :pointer)

(cffi:defcfun ("objc_mutex_allocate" objc_mutex_allocate) :pointer)

(cffi:defcfun ("objc_mutex_deallocate" objc_mutex_deallocate) :int
  (mutex :pointer))

(cffi:defcfun ("objc_mutex_lock" objc_mutex_lock) :int
  (mutex :pointer))

(cffi:defcfun ("objc_mutex_unlock" objc_mutex_unlock) :int
  (mutex :pointer))

(cffi:defcfun ("objc_mutex_trylock" objc_mutex_trylock) :int
  (mutex :pointer))

(cffi:defcfun ("objc_condition_allocate" objc_condition_allocate) :pointer)

(cffi:defcfun ("objc_condition_deallocate" objc_condition_deallocate) :int
  (condition :pointer))

(cffi:defcfun ("objc_condition_wait" objc_condition_wait) :int
  (condition :pointer)
  (mutex :pointer))

(cffi:defcfun ("objc_condition_signal" objc_condition_signal) :int
  (condition :pointer))

(cffi:defcfun ("objc_condition_broadcast" objc_condition_broadcast) :int
  (condition :pointer))

(cffi:defcfun ("objc_thread_detach" objc_thread_detach) :pointer
  (selector :pointer)
  (object :pointer)
  (argument :pointer))

(cffi:defcfun ("objc_thread_yield" objc_thread_yield) :void)

(cffi:defcfun ("objc_thread_exit" objc_thread_exit) :int)

(cffi:defcfun ("objc_thread_set_priority" objc_thread_set_priority) :int
  (priority :int))

(cffi:defcfun ("objc_thread_get_priority" objc_thread_get_priority) :int)

(cffi:defcfun ("objc_thread_get_data" objc_thread_get_data) :pointer)

(cffi:defcfun ("objc_thread_set_data" objc_thread_set_data) :int
  (value :pointer))

(cffi:defcfun ("objc_thread_id" objc_thread_id) :pointer)

(cffi:defcfun ("objc_thread_add" objc_thread_add) :void)

(cffi:defcfun ("objc_thread_remove" objc_thread_remove) :void)

(cffi:defctype objc_thread_callback :pointer)

(cffi:defcfun ("objc_set_thread_callback" objc_set_thread_callback) :pointer
  (func :pointer))

(cffi:defcfun ("__objc_init_thread_system" __objc_init_thread_system) :int)


(cl:defconstant _C_ID #\@)
(cl:defconstant _C_CLASS #\#)
(cl:defconstant _C_SEL #\:)
(cl:defconstant _C_CHR #\c)
(cl:defconstant _C_UCHR #\C)
(cl:defconstant _C_SHT #\s)
(cl:defconstant _C_USHT #\S)
(cl:defconstant _C_INT #\i)
(cl:defconstant _C_UINT #\I)
(cl:defconstant _C_LNG #\l)
(cl:defconstant _C_ULNG #\L)
(cl:defconstant _C_LNG_LNG #\q)
(cl:defconstant _C_ULNG_LNG #\Q)
(cl:defconstant _C_FLT #\f)
(cl:defconstant _C_DBL #\d)
(cl:defconstant _C_LNG_DBL #\D)
(cl:defconstant _C_BFLD #\b)
(cl:defconstant _C_BOOL #\B)
(cl:defconstant _C_VOID #\v)
(cl:defconstant _C_UNDEF #\?)
(cl:defconstant _C_PTR #\^)
(cl:defconstant _C_CHARPTR #\*)
(cl:defconstant _C_ARY_B #\[)
(cl:defconstant _C_ARY_E #\])
(cl:defconstant _C_UNION_B #\()
(cl:defconstant _C_UNION_E #\))
(cl:defconstant _C_STRUCT_B #\{)
(cl:defconstant _C_STRUCT_E #\})
(cl:defconstant _C_VECTOR #\!)
(cl:defconstant _C_COMPLEX #\j)
(cl:defconstant _C_ATOM #\%)
(cl:defconstant _C_CONST	 #\r)
(cl:defconstant _C_IN		 #\n)
(cl:defconstant _C_INOUT	 #\N)
(cl:defconstant _C_BYCOPY	 #\O)
(cl:defconstant _C_BYREF	 #\R)
(cl:defconstant _C_ONEWAY	 #\V)
(cl:defconstant _C_GCINVISIBLE	 #\|)
